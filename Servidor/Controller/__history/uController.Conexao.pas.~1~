unit uController.Conexao;

interface

uses
  System.SysUtils;

type
  TControllerConexao = class
  private
    class var FInstance: TControllerConexao;
  private
    constructor PrivateCreate;
  public
    class function  GetInstance(): TControllerConexao; overload;
    class procedure DeleteInstance;

    constructor Create;
    destructor  Destroy; override;
  end;

implementation

{ TControllerConexao }

constructor TControllerConexao.Create;
begin
  raise Exception.Create('Para obter uma conexão invoque o método GetIntance');
end;

class procedure TControllerConexao.DeleteInstance;
begin
  try
    FreeAndNil(FInstance);
  except
  end;
end;

destructor TControllerConexao.Destroy;
begin
  try
    inherited;
  except on E: Exception do
    raise Exception.Create('TEstoque.Destroy: '+E.Message);
  end;
end;

class function TControllerConexao.GetInstance: TControllerConexao;
begin
  try
    if not Assigned(FInstance) then
      FInstance:= TControllerConexao.PrivateCreate;

    Result:= FInstance;
  except on E: Exception do
    raise Exception.Create('TEstoque.GetInstance: '+E.Message);
  end;
end;

constructor TControllerConexao.PrivateCreate;
begin
  inherited Create;
end;

end.
