unit View.FmdPessoas;

interface

uses
  Controller.Pessoas, Controller.Enderecos,
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Buttons, Vcl.ExtCtrls, Data.DB,
  Vcl.Grids, Vcl.DBGrids, REST.Types, Vcl.StdCtrls;

type
  TfmdPessoas = class(TForm)
    pLateral: TPanel;
    btnAnterior: TSpeedButton;
    btnProximo: TSpeedButton;
    btnAdicionar: TSpeedButton;
    Editar: TSpeedButton;
    apagar: TSpeedButton;
    btmFechar: TSpeedButton;
    btnSalvar: TSpeedButton;
    DBGrid: TDBGrid;
    pTop: TPanel;
    edtId: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    edtDocumento: TEdit;
    Label3: TLabel;
    edtNome: TEdit;
    Label4: TLabel;
    edtSobrenome: TEdit;
    Label5: TLabel;
    cbNatureza: TComboBox;
    Label6: TLabel;
    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btmFecharClick(Sender: TObject);
    procedure btnAdicionarClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnSalvarClick(Sender: TObject);
    procedure EditarClick(Sender: TObject);
    procedure apagarClick(Sender: TObject);
    procedure btnProximoClick(Sender: TObject);
    procedure btnAnteriorClick(Sender: TObject);
  private
    { Private declarations }
    fControllerPessoa:   TControllerPessoa;
    fControllerEndereco: TControllerEndereco;
    fRegistro:           TDTOPessoa;
  public
    { Public declarations }
    procedure SetRegistro(aRegistro:TDTOPessoa);
  end;

var
  fmdPessoas: TfmdPessoas;

implementation

{$R *.dfm}

uses View.FchPessoas;

procedure TfmdPessoas.apagarClick(Sender: TObject);
var
  nMsg: Integer;
begin
  if fControllerEndereco.GetDataSource.DataSet.RecordCount < 2 then
  begin
    ShowMessage('Não é possível apagar o último endereço');
    Exit;
  end;

  nMsg:= Application.MessageBox(PChar('Deseja apagar o registro?'), PChar(Caption), MB_ICONQUESTION+MB_YESNO);

  if nMsg <> MB_OK then
    Exit;

  fControllerEndereco.Delete;
  fControllerEndereco.Select(fRegistro.IdPessoa);
end;

procedure TfmdPessoas.btmFecharClick(Sender: TObject);
begin
  Close;
end;

procedure TfmdPessoas.btnAdicionarClick(Sender: TObject);
var
  e: TDTOEndereco;

  sMsg: string;
  nMsg: Integer;
begin
  if (fRegistro.Idpessoa < 1) and (fControllerEndereco.GetDataSource.DataSet.RecordCount = 1) then
  begin
    sMsg:= 'Para adicionar outro endereço e necessário salvar o registro.' +
      #13 + 'Deseja continuar?';

    nMsg:= Application.MessageBox(PChar(sMsg), PChar(Caption), MB_ICONQUESTION+MB_YESNO);

    if nMsg <> 6 then
      Exit;

    btnSalvar.Click;
  end;

  fControllerEndereco.GetDataSource.DataSet.Append;

  fchPessoas:= TfchPessoas.Create(Self);

  e:= TDTOEndereco.Create;
  e.IdPessoa:= fRegistro.Idpessoa;

  fchPessoas.SetRegistro(e);
end;

procedure TfmdPessoas.btnAnteriorClick(Sender: TObject);
begin
  fControllerEndereco.PaginaAnterior;
end;

procedure TfmdPessoas.btnProximoClick(Sender: TObject);
begin
  fControllerEndereco.ProximaPagina;
end;

procedure TfmdPessoas.btnSalvarClick(Sender: TObject);
var
  p: TDTOPessoa;
begin
  if fControllerEndereco.GetDataSource.DataSet.RecordCount = 0 then
  begin
    ShowMessage('Não é possível inserir uma pessoa sem endereço');
    Exit;
  end;

  if cbNatureza.ItemIndex = 0 then
  begin
    ShowMessage('Selecione uma natureza');
    cbNatureza.SetFocus;
    Exit;
  end;

  p:= TDTOPessoa.Create;
  p.Idpessoa:=  StrToInt64Def(edtId.Text, -1);
  p.Natureza:=  cbNatureza.ItemIndex;
  p.Documento:= edtDocumento.Text;
  p.Primeiro:=  edtNome.Text;
  p.Segundo:=   edtSobrenome.Text;

  if fControllerPessoa.GetDataSource.DataSet.State = dsInsert then
  begin
    p.Registro:= Date;
    fControllerPessoa.Insert(p, fControllerEndereco.GetRegistro)
  end else
    if fControllerPessoa.GetDataSource.DataSet.State = dsEdit then
      fControllerPessoa.Update(p);

  fControllerPessoa.Select();

  Close;
end;

procedure TfmdPessoas.EditarClick(Sender: TObject);
begin
  fControllerEndereco.GetDataSource.DataSet.Edit;

  fchPessoas:= TfchPessoas.Create(Self);
  fchPessoas.SetRegistro(fControllerEndereco.GetRegistro);
end;

procedure TfmdPessoas.FormActivate(Sender: TObject);
begin
  WindowState:= TWindowState.wsMaximized;
end;

procedure TfmdPessoas.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  fControllerPessoa.Close;
  fControllerEndereco.Close;

  Self.Release;
end;

procedure TfmdPessoas.FormCreate(Sender: TObject);
begin
  cbNatureza.Items.Create;
  cbNatureza.Items.Add('Escolha uma');
  cbNatureza.Items.Add('Física');
  cbNatureza.Items.Add('Juridica');

  fControllerPessoa:=   TControllerPessoa.Create;
  fControllerEndereco:= TControllerEndereco.Create;
end;

procedure TfmdPessoas.SetRegistro(aRegistro: TDTOPessoa);
begin
  fRegistro:= aRegistro;

  edtId.Text:=           fRegistro.idpessoa.ToString;
  cbNatureza.ItemIndex:= fRegistro.Natureza;
  edtDocumento.Text:=    fRegistro.Documento;
  edtNome.Text:=         fRegistro.Primeiro;
  edtSobrenome.Text:=    fRegistro.Segundo;
end;

end.
